
一、数据结构和算法概述
    数据结构就是把数据元素按照一定的关系组合起来的集合，用来组织和存储数据
    分类：
        逻辑结构：按数据与数据之间的关系，是一种逻辑结构上的分类
            分类：
                1、集合结构：集合结构中数据元素除了属于同一个集合外，他们之间没有任何的其他关系
                2、线性结构：线性结构中的数据存在着一种一对一的关系
                3、树形结构：树形结构的元素之间存在着一对多的层次关系
                4、图形结构：图形结构的数据元素是多对多的关系
        物理结构：在存储角度出发进行分类，是逻辑节后中真正的表示方式
            分类：
                1、顺序结构
                    数据单元和所占的数据地址是连续的，是有索引的，访问快，增删慢
                2、链式结构
                    内存单元可以是连续的，也可以是不连续的，而是通过指针将这些内存单元连接起来，访问慢，增删快

    算法：
        按照一定的条件，将数据进行计算，得到需要的结果


简单排序：
    Comparable，排序时，不单单对基本数据类型进行排序，而是对所有实现Comparable的接口进行排序

冒泡排序：
    适用于待排序元素比较少的时候
    排序原理：
        1、比较相邻的元素，若前一个元素比后一个元素大，则交换着两个元素的位置
        2、对每一对相邻的元素做同样的工作，从开始第一对元素到结尾的最后一对元素，最终最后的位置就是最大值

选择排序：
    排序原理：
        1、每一次遍历的过程中，都假定第一个所引出的元素是最小值，和其他索引处的值进行比较，若当前索引处的值大于其他某一个索引处的值
           则假定其他某个索引处的值为最小值，最后可以找到最小值所在的索引
        2、交换第一个索引处和最小值所在的索引处的值

插入排序：
    排序原理：
        1、将所有元素分为两组，已经排序的和未排序的
        2、找到未排序的组中第一个元素，向已经排序的组中进行插入
        3、倒序遍历已经排序的元素，一次和待插入元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待插入元素
           放到这个位置，其他的元素向后移动一位

上述排序皆为简单排序，时间复杂度都是二次方，下介绍高级排序

希尔排序：
    希尔排序是插入排序的一种，又叫做缩小增量排序，是插入排序的一个高效的改良版本
    排序原理：
        1、选定一个增长量h，按照增长量h作为数据分组的依据，对数据进行分组，增长量为5，说明的是以5为长度进行分组
        2、对分好的组的每一组完成插入排序
        3、减小增长量h，在减小增长量的过程中，数组变为部分有序，最小减为1，重复第二步操作
    增长量的确定：
        int h = 1;
        while(h < 数组长度 / 2){
            h = 2h + 1
        }
        // 循环结束后我们就可以确定h的最大值
        // h的减小规则
        h = h / 2
    时间复杂度：O(n ^ (1.3 --> 2))

归并排序：
    定义：定义方法时，在方法内部调用方法本身，称之为递归
    作用：将一个大型复杂的问题，层层转化为一个与原问题相似的，闺蜜较小的问题来纠结。递归策略值需要少量的程序就可以描述出
         解决问题的过程，大大减少了程序的代码量
    注意事项：
        在递归中，不能无限制的调用自己，必须要有边界条件，能够使递归结束，因为每一次递归调用都会在栈内存中开辟新的空间，
        重复执行方法，若递归层次太深，还会导致栈内存溢出

    排序原理：
        1、尽可能的一组数据拆分为两个元素相等的子组，并对每一个子组进行继续拆分，直到拆分后的每一个子组的元素个数为1为止
        2、将相邻的两个子组合并成一个有序的大组
        3、不断重复步骤二，直到最终只有一个组为止
    时间复杂度分析：
        假设元素个数为n，那么使用归并排序拆分次数为log2(n)，所以共log2(n)层，最终得到的归并排序时间复杂度为
        log2(n) * 2 ^ (log2(n)) = n * log2(n) 所以时间复杂度为nlogn
    缺点：
        需要额外申请内存，导致控件复杂度上升，是典型的以空间换时间的操作

快速排序：
    排序原理：
        1、首先设定一个分界值，通过该分界值，将数组分为左右两个部分
        2、将大于或等于分界值数据放到数组的右边，小于分界值的数据放到数组的左边，此时左边部分数据都小于或等于分界值，
           而右边部分的个元素大于或等于分界值
        3、然后将左边和右边的数据进行独立排序，对于左侧的数据数据，又可以取一个分界值，将该部分数据分为左右两个部分，同样在
           左边放置较小值，右边放置最大值，右边的数据也可以做类似处理
        4、重复上述过程，可以得出，这个问题可以通过递归解决。通过递归将左侧部分排好序后，在递归好右侧部分的顺序，当左右
           两侧都排好序时，整个数组也就排好了

    切分原理：
        1、找到一个基准值，将两个指针分别指向数组的头部和尾部
        2、先从尾部向头部开始搜索一个比基准值小的元素，搜索到即停止，并记录指针的位置
        3、在从头部向尾部开始搜索一个比基准值大的元素，搜索到即停止，并记录指针的位置
        4、交换昂前左边的指针位置和右边的指针位置的元素
        5、重复2,3,4步骤，直到左边指针的值大于右边指针的值停止
    快速排序时间复杂度：
        最优情况：每一次切分选择的基准数值刚好将当前序列等分，n * log(n)
        最差情况：n ^ 2，大规模数据情况下，时间复杂度几句增加
        平均情况：n * log(n)

排序的稳定性：
    稳定性定义：数组中由若干个元素，其中元素A和B相等，且A在B的前面，若经过某种排序算法后，能够保证A仍然在B的前面，那么这个算法就是稳定的
    稳定性的意义：若数据只需要一次排序，那么稳定性是没有意义的，若一组数据需要多次排序，稳定性就是有意义的，可以减小系统开销
    常见排序算法的稳定性：(若只需一次排序，则使用性能较高的排序，若需要多次排序，则要选择具稳定性的排序算法)
        冒泡排序：
            只有在arr[i] > arr[i + 1]时，才会交换位置，而相等的时候不会交换位置，所以冒泡排序是一种稳定排序
        选择排序对相等的元素会交换位置，所以选择排序是一种不稳的的排序算法
        插入排序：不会交换相等元素位置，是稳定排序
        希尔排序：是一种不稳定排序
        合并排序：稳定排序
        快速排序：也是一种不稳定排序

























